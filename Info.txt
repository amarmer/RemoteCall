RemoteCall is C++ framework for RPC.

There are many ways to uses Remote procedure call, as it is described in http://en.wikipedia.org/wiki/Remote_procedure_call
Advantage of RemoteCall C++ framework is it allows to use RPC identically to how C++ calls are 
used locally in the same process.   

For comparison, local and remote declarations, implementations and calls:

1. Declaration:   DECLARE_REMOTE

Local
tuple<std::string, int> Test(std::vector<std::string>& vInOut, char c, const string& s);

Remote    (For parameters and return can be used any type, except pointer)
tuple<std::string, int> DECLARE_REMOTE(Test)(std::vector<std::string>& vInOut, char c, const string& s);


2. Implementation:   IMPLEMENT_REMOTE

Local
tuple<std::string, int> Test(std::vector<std::string>& vInOut, char c, const string& s);
{
   ...
   return ret;
}

Remote     
tuple<std::string, int> IMPLEMENT_REMOTE(Test)(std::vector<std::string>& vInOut, char c, const string& s)
{
   ...
   return ret;
}


3. Call:   transport.CALL_REMOTE

Local
vector<string> vInOut = {"In1", "In2"};
auto ret = Test(vInOut, "A", Test");

Remote      
vector<string> vInOut = {"In1", "In2"};
auto ret = transport.CALL_REMOTE(Test)(vInOut, "A", Test");


4. Transport
    
'transport' above is object of a class which is derived from RemoteCall::Transport and
implements pure virtual function SendReceive, which can use any remote data transfer methods 
to send and receive vector<char>, for instance:

class RemoteCallTransport: public RemoteCall::Transport
{
public:   
   bool SendReceive(std::vector<char>& vChar) override   
   {         
      RemoteDataTransport(vChar);      

      /*
      RemoteDataTransport(vChar) can be any appropiate data transport, for instance: http, sockets, names pipes,  etc.,         
      which sends and receives 'vChar'.

      When 'vChar' is received by server, it should call RemoteCall::Server::CallFromClient(vChar), 
      which  unserializes vChar and calls  corresponding server function.
      After call RemoteCall::Server::CallFromClient(vChar), 'vChar' contains serialized Out parameters
      and Return.  Then 'vChar' should be sent back  to the client as Out parameter of RemoteDataTransport(vChar).
      */
    }
};

RemoteCallTransport transport;


5. New Data Serialization

For every new data "T", there are 2 serialization functions which needs to be implemented:

RemoteCall::SerializeWriter& operator << (RemoteCall::SerializeWriter& writer, const T& t)
{   
   ...   
   return writer;
}

RemoteCall::SerializeReader& operator >> (RemoteCall::SerializeReader& reader, T& t)
{
   ...
   return reader;
}


For instance for a structure ABC:
struct ABC
{
   ABC(const std::string& s = "", char c = 0) : s_(s), c_(c) {}

   std::string s_;
   char c_;
};


RemoteCall::SerializeWriter& operator << (RemoteCall::SerializeWriter& writer, const ABC& abc)
{
   writer << abc.s_ << abc.c_;

   return writer;
}

RemoteCall::SerializeReader& operator >> (RemoteCall::SerializeReader& reader, ABC& abc)
{
   reader >> abc.s_ >> abc.c_;

   return reader;
}

Example of a function declation which uses ABC:

bool DECLARE_REMOTE(Test)(std::vector<ABC>& vABC);
